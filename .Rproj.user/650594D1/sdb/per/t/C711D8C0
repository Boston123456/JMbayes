{
    "contents" : "prederrJM.JMbayes <-\nfunction (object, newdata, Tstart, Thoriz, lossFun = c(\"square\", \"absolute\"), \n                               interval = FALSE, idVar = \"id\", simulate = FALSE, M = 100, ...) {\n    if (!inherits(object, \"JMbayes\"))\n        stop(\"Use only with 'JMbayes' objects.\\n\")\n    if (!is.data.frame(newdata) || nrow(newdata) == 0)\n        stop(\"'newdata' must be a data.frame with more than one rows.\\n\")\n    if (is.null(newdata[[idVar]]))\n        stop(\"'idVar' not in 'newdata.\\n'\")\n    lossFun <- if (is.function(lossFun)) {\n        lf <- lossFun\n        match.fun(lossFun)\n    } else {\n        lf <- match.arg(lossFun)\n        if (lf == \"absolute\") function (x) abs(x) else function (x) x*x\n    }\n    id <- newdata[[idVar]]\n    id <- match(id, unique(id))\n    TermsT <- object$Terms$termsT\n    SurvT <- model.response(model.frame(TermsT, newdata)) \n    is_counting <- attr(SurvT, \"type\") == \"counting\"\n    Time <- if (is_counting) {\n        ave(SurvT[, 2], id, FUN = function (x) tail(x, 1))\n    } else {\n        SurvT[, 1]\n    }\n    timeVar <- object$timeVar\n    newdata2 <- newdata[Time > Tstart, ]\n    SurvT <- model.response(model.frame(TermsT, newdata2))\n    if (is_counting) {\n        id2 <- newdata2[[idVar]]\n        f <- factor(id2, levels = unique(id2))\n        Time <- ave(SurvT[, 2], f, FUN = function (x) tail(x, 1))\n        delta <- ave(SurvT[, 3], f, FUN = function (x) tail(x, 1))\n    } else {\n        Time <- SurvT[, 1]\n        delta <- SurvT[, 2]\n    }\n    timesInd <- newdata2[[timeVar]] <= Tstart\n    aliveThoriz <- newdata2[Time > Thoriz & timesInd, ]\n    deadThoriz <- newdata2[Time <= Thoriz & delta == 1 & timesInd, ]\n    indCens <- Time < Thoriz & delta == 0 & timesInd\n    censThoriz <- newdata2[indCens, ]\n    nr <- length(unique(newdata2[[idVar]]))\n    idalive <- unique(aliveThoriz[[idVar]])\n    iddead <- unique(deadThoriz[[idVar]])\n    idcens <- unique(censThoriz[[idVar]])\n    Surv.aliveThoriz <- if (is_counting) {\n        survfitJM(object, newdata = aliveThoriz, idVar = idVar, simulate = simulate, M = M,\n                  survTimes = Thoriz, last.time = rep(Tstart, length(idalive)),\n                  LeftTrunc_var = all.vars(TermsT)[1L])\n    } else {\n        survfitJM(object, newdata = aliveThoriz, idVar = idVar, simulate = simulate, M = M,\n                  survTimes = Thoriz, last.time = rep(Tstart, length(idalive)))\n        \n    }\n    Surv.deadThoriz <- if (is_counting) {\n        survfitJM(object, newdata = deadThoriz, idVar = idVar, simulate = simulate,\n                  survTimes = Thoriz, last.time = rep(Tstart, length(iddead)),\n                  LeftTrunc_var = all.vars(TermsT)[1L])\n    } else {\n        survfitJM(object, newdata = deadThoriz, idVar = idVar, simulate = simulate,\n                  survTimes = Thoriz, last.time = rep(Tstart, length(iddead)))\n    }\n    Surv.aliveThoriz <- sapply(Surv.aliveThoriz$summaries, \"[\", 2)\n    Surv.deadThoriz <- sapply(Surv.deadThoriz$summaries, \"[\", 2)\n    if (nrow(censThoriz)) {\n        Surv.censThoriz <- if (is_counting) {\n            survfitJM(object, newdata = censThoriz, idVar = idVar, simulate = simulate, M = M,\n                      survTimes = Thoriz, last.time = rep(Tstart, length(idcens)),\n                      LeftTrunc_var = all.vars(TermsT)[1L])\n        } else {\n            survfitJM(object, newdata = censThoriz, idVar = idVar, simulate = simulate, M = M,\n                      survTimes = Thoriz, last.time = rep(Tstart, length(idcens)))\n        }\n        tt <- Time[indCens]\n        weights <- if (is_counting) {\n            survfitJM(object, newdata = censThoriz, idVar = idVar, simulate = simulate, M = M,\n                      survTimes = Thoriz, last.time = tt[!duplicated(censThoriz[[idVar]])],\n                      LeftTrunc_var = all.vars(TermsT)[1L])\n        } else {\n            survfitJM(object, newdata = censThoriz, idVar = idVar, simulate = simulate, M = M,\n                      survTimes = Thoriz, last.time = tt[!duplicated(censThoriz[[idVar]])])\n        }\n        Surv.censThoriz <- sapply(Surv.censThoriz$summaries, \"[\", 2)\n        weights <- sapply(weights$summaries, \"[\", 2)\n    } else {\n        Surv.censThoriz <- weights <- NA\n    }\n    prederr <- if (!interval) {\n        (1/nr) * sum(lossFun(1 - Surv.aliveThoriz), lossFun(0 - Surv.deadThoriz),\n                     weights * lossFun(1 - Surv.censThoriz) + (1 - weights) * lossFun(0 - Surv.censThoriz), \n                     na.rm = TRUE)\n    } else {\n        TimeCens <- object$y$Time\n        deltaCens <- 1 - object$y$event\n        KMcens <- survfit(Surv(TimeCens, deltaCens) ~ 1)\n        times <- TimeCens[TimeCens > Tstart & TimeCens < Thoriz & !deltaCens]\n        times <- sort(unique(times))\n        k <- as.numeric(table(times))\n        w <- summary(KMcens, times = Tstart)$surv / summary(KMcens, times = times)$surv\n        prederr.times <- sapply(times, \n                                function (t) prederrJM(object, newdata, Tstart, t,\n                                                    interval = FALSE, idVar = idVar, simulate = simulate)$prederr)\n        num <- sum(prederr.times * w * k, na.rm = TRUE)\n        den <- sum(w * k, na.rm = TRUE)\n        num / den\n    }\n    out <- list(prederr = prederr, nr = nr, Tstart = Tstart, Thoriz = Thoriz, \n                interval = interval, classObject = class(object), \n                nameObject = deparse(substitute(object)), lossFun = lf)\n    class(out) <- \"prederrJM\"\n    out\n}\n",
    "created" : 1458043969124.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1098932709",
    "id" : "C711D8C0",
    "lastKnownWriteTime" : 1458046798,
    "path" : "C:/Users/Dimitris/Documents/PackagesGitHub/JMbayes/R/prederrJM.JMbayes.R",
    "project_path" : "R/prederrJM.JMbayes.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}