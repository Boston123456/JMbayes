{
    "contents" : "library(\"data.table\")\ninstall.packages(\"devtools\")\ndevtools::install_github(\"drizopoulos/JMbayes\")\nlibrary(\"JMbayes\")\n\n# Issue 4\n\ndForm <- list(fixed = ~ 1, indFixed = 2, \n              random = ~ 0 + I(rep(0, length(obstime))), indRandom = 1)\n\ntr.JMb.int.TREND <- jointModelBayes(tr.glmmFit.int, tr.Cox.id, timeVar=\"obstime\", \n                                    param = \"td-both\", extraForm = dForm, n.iter = 3000)\n\n\niForm <- list(fixed = ~ 0 + obstime + I(obstime^2/2), indFixed = 1:2, \n              random = ~ 0 + obstime, indRandom = 1)\n\ntr.JMb.int.CUM <- jointModelBayes(tr.glmmFit.int, tr.Cox.id, timeVar = \"obstime\", \n                                  param = \"td-extra\", extraForm = iForm, n.iter = 3000)\n\nWF1 <- function (u, parms, t.max) {\n    dexp(x = u, rate = parms)\n}\n\ntr.JMb.int.WF1 <- jointModelBayes(tr.glmmFit.int, tr.Cox.id, timeVar = \"obstime\", \n                                  estimateWeightFun = TRUE, weightFun = WF1, \n                                  priorShapes = list(shape1 = dunif), \n                                  priors = list(priorshape1 = c(0, 10)), verbose2 = TRUE)\n\nWF2 <- function (u, parms, t.max) {\n    num <- dexp(x = u, rate = parms)\n    den <- pexp(q = c(0, t.max), rate = parms)\n    num / (den[2L] - den[1L])\n}\n\ntr.JMb.int.WF2 <- jointModelBayes(tr.glmmFit.int, tr.Cox.id, \n                                  timeVar=\"obstime\", \n                                  estimateWeightFun = TRUE,\n                                  weightFun = WF2,\n                                  priorShapes = list(shape1 = dunif),\n                                  priors = list(priorshape1 = c(0, 10)))\n\n\n# Issue 5\ntf <- function (x, data) exp(x)\n\ntr.JMb.Pois.int.transf <- update(tr.JMb.Pois.int, transFun = list(\"value\" = tf), \n                                 n.iter = 4000, scales = list(betas = 0.5, \n                                                              b = rep(0.2, 3000),\n                                                              gammas = 0.1,\n                                                              alphas = 0.1,\n                                                              Bs.gammas = 0.3)) \n\n\ntr.glmmFit.Pois.int <- glmmPQL(claimyr ~ obstime + sex, random = ~ 1 | id, \n                               family = poisson, niter = 100, data = tr.d3000)\n\ntr.Cox.id <- coxph(Surv(start, stop, cens) ~ sex + cluster(id), data = tr.d3000.id, \n                   x = TRUE, model = TRUE)\n\ndLongPois <- function (y, eta.y, scale, log, data) {\n    dpois(x = y, lambda = exp(eta.y), log = log)\n}\n\ntf <- function (x, data) cbind(x, \"sex1\" = x * (data$sex == \"1\"))\n\ntr.JMb.Pois.int.transf <- jointModelBayes(tr.glmmFit.Pois.int, tr.Cox.id, timeVar = \"obstime\", \n                                          densLong = dLongPois, n.iter = 4000, \n                                          transFun = list(\"value\" = tf)) \n\n\n\nlmeObject = tr.glmmFit.Pois.int\nsurvObject = tr.Cox.id\ntimeVar = \"obstime\"\nparam = \"td-value\"\nextraForm = NULL\ntransFun = list(\"value\" = function (x, data) cbind(x, \"sex1\" = x * (data$sex == \"1\")))\ndensLong = function (y, eta.y, scale, log, data) dpois(x = y, lambda = exp(eta.y), log = log)\nbaseHaz = \"P-splines\" # \"regression-splines\"\nlag = 0\ninit = NULL\npriors = NULL\ncontrol = list()\ndf.RE = NULL\nscales = NULL\nestimateWeightFun = FALSE\n\n",
    "created" : 1442413492862.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "1502661691",
    "id" : "32736AFC",
    "lastKnownWriteTime" : 7011605692497750387,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}