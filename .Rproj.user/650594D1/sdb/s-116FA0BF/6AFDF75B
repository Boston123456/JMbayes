{
    "contents" : "library(MASS)\nlibrary(nlme)\nlibrary(splines)\nlibrary(survival)\nlibrary(lattice)\nsourceDir <- function(path, ...) {\n    for (nm in list.files(path, pattern = \"[.][RrSsQq]$\")) {\n        source(file.path(path, nm), ...)\n    }\n}\nsourceDir(file.path(getwd(), \"R\")); rm(sourceDir)\n\ndata(pbc2, package = \"JM\")\ndata(pbc2.id, package = \"JM\")\ndata(aids, package = \"JM\")\ndata(aids.id, package = \"JM\")\ndata(prothro, package = \"JM\")\ndata(prothros, package = \"JM\")\n\n#############################################\n\n# PBC\npbc2$status2 <- as.numeric(pbc2$status != \"alive\")\npbc2.id$status2 <- as.numeric(pbc2.id$status != \"alive\")\npbc2$serBilirD <- 1 * (pbc2$serBilir > 1.8)\npbc2$edemaBase <- with(pbc2, ave(edema, id, FUN = function (x) x[1]))\nlmeFit <- lme(log(serBilir) ~ ns(year, 2),\n    random = ~ ns(year, 2) | id, data = pbc2)\n#lmeFit <- lme(log(serBilir) ~ edemaBase + year + drug + I(year^2) + age + year:edemaBase + drug:year + I(year^2):drug,\n#              random = ~ year | id, data = pbc2)\nlmeFit <- glmmPQL(serBilirD ~ year, random = ~ year | id, family = binomial, data = pbc2)\nsurvFit <- coxph(Surv(years, status2) ~ 1, data = pbc2.id, x = TRUE)\n\n# PBC competing risks, time-varying covariates & left-truncation\npbc <- pbc2[c(\"id\", \"serBilir\", \"drug\", \"year\", \"years\", \"status\", \"spiders\")]\npbc$start <- pbc$year\nsplitID <- split(pbc[c(\"start\", \"years\")], pbc$id)\npbc$stop <- unlist(lapply(splitID,\n                          function (d) c(d$start[-1], d$years[1]) ))\npbc <- pbc[!is.na(pbc$spiders), ]\npbc <- pbc[pbc$start != 0, ]\npbc$id <- factor(pbc$id)\npbc2CR <- crLong(pbc, statusVar = \"status\", censLevel = \"alive\", nameStrata = \"CR\")\npbc2CR$event <- with(pbc2CR, ave(status2, id,\n                                 FUN = function (x) c(rep(0, length(x)-2), x[1:2])))\n\nlmeFit <- lme(log(serBilir) ~ drug * ns(year, 2), data = pbc2CR,\n              random = ~ ns(year, 2) | id)\n\nsurvFit <- coxph(Surv(start, stop, event) ~ CR * drug * spiders + cluster(id) + strata(CR),\n                 data = pbc2CR, x = TRUE, model = TRUE)\n\n\n# PBC time-varying covariates & left-truncation\npbc <- pbc2[c(\"id\", \"serBilir\", \"drug\", \"year\", \"years\",\n              \"status2\", \"spiders\")]\npbc$start <- pbc$year\nsplitID <- split(pbc[c(\"start\", \"years\")], pbc$id)\npbc$stop <- unlist(lapply(splitID,\n                          function (d) c(d$start[-1], d$years[1]) ))\npbc$event <- with(pbc, ave(status2, id,\n                           FUN = function (x) c(rep(0, length(x)-1), x[1])))\npbc <- pbc[!is.na(pbc$spiders), ]\npbc <- pbc[pbc$start != 0, ]\n\nlmeFit <- lme(log(serBilir) ~ drug * ns(year, 2), data = pbc,\n              random = ~ ns(year, 2) | id)\n\nsurvFit <- coxph(Surv(start, stop, event) ~ drug * spiders + cluster(id),\n                 data = pbc, x = TRUE, model = TRUE)\n\n\n# AIDS\nlmeFit <- lme(CD4 ~ obstime + gender + drug, data = aids, \n              random = ~ obstime | patient)\n#survFit <- coxph(Surv(Time, death) ~ drug + gender, data = aids.id, x = TRUE)\nsurvFit <- coxph(Surv(start, stop, event) ~ drug + gender + cluster(patient), \n                 data = aids, x = TRUE, model = TRUE)\naids.id$start <- runif(nrow(aids.id), 0, 1) # left-truncation\naids.id$stop <- aids.id$Time\nsurvFit <- coxph(Surv(start, stop, event) ~ drug + gender + cluster(patient), \n                 data = aids.id, x = TRUE, model = TRUE)\n\n\nlmeObject = lmeFit\nsurvObject = survFit\ntimeVar = \"year\" #\"obstime\"\nparam = \"td-value\"\nextraForm = NULL\ntransFun = NULL\ndensLong = NULL\nbaseHaz = \"P-splines\" # \"regression-splines\"\nlag = 0\ninit = NULL\npriors = NULL\ncontrol = list()\ndf.RE = NULL\nscales = NULL\nestimateWeightFun = FALSE\nweightFun <- function (u, parms, t.max) {\n    #num <- dnorm(x = u, sd = parms)\n    #den <- pnorm(q = c(0, t.max), sd = parms)\n    #num / (den[2L] - den[1L])\n    exp(- parms * u)\n}\npriors = list(priorR.invD = diag(2))\n\n\ninitials = initial.values\npriors = prs\ncontrol = con\ncontrol$verbose = F\n\n\ntransFun <- list(\"value\" = function (x, data) cbind(x, \"spiders\" = x * (data$spiders == \"Yes\")))\n\n\ndLongBin <- function (y, eta.y, scale, log = FALSE, data) {\n    dbinom(x = y, size = 1L, prob = plogis(eta.y), log = log)\n}\n\njointFit <- jointModelBayes(lmeFit, survFit, timeVar = \"obstime\")\n\njointFit <- jointModelBayes(lmeFit, survFit, timeVar = \"year\", estimateWeightFun = TRUE, \n                            n.iter = 30000, verbose2 = TRUE)\n\nff <- function (u, parms, t) {\n    exp(- parms * u)\n}\njointFit <- jointModelBayes(lmeFit, survFit, timeVar = \"year\", estimateWeightFun = TRUE,\n                            weightFun = ff, priorShapes = list(shape1 = dunif),\n                            priors = list(priorshape1 = c(0, 10)), verbose2 = TRUE)\n\n\n\nff <- function (u, parms, t) {\n    dnorm(u, parms[1]) / (pnorm(t, parms[1]) - 0.5)\n}\n\nff <- function (u, parms, t) {\n    num <- dsn(u, parms[1], parms[2], parms[3])\n    den <- diff(psn(c(0, t), parms[1], parms[2], parms[3]))\n    num / den\n}\n\ndForm <- list(fixed = ~ 0 + year + ins(year, 2), random = ~ 0 + year, \n              indFixed = 1:3, indRandom = 1)\n\niFormW <- list(fixed = ~ 0 + year + ins(year, 2, weight.fun = ff),\n               random = ~ 0 + year + ins(year, 2, weight.fun = ff), \n               indFixed = 1:3, indRandom = 1:3)\n\njointFit1 <- jointModelBayes(lmeFit, survFit, timeVar = \"year\", \n                             param = \"td-extra\", extraForm = iFormW)\n\n\njointFit <- jointModelBayes(lmeFit, survFit, timeVar = \"year\", estimateWeightFun = TRUE)\n\ndForm <- list(fixed = ~ 0 + dns(year, 2), random = ~ 0 + dns(year, 2), \n              indFixed = 2:3, indRandom = 2:3)\njointFit <- jointModelBayes(lmeFit, survFit, timeVar = \"year\", estimateWeightFun = TRUE,\n                            param = \"td-both\", extraForm = dForm)\n\n\n\njj <- update(jointFit, scales = list(betas = jointFit$scales$betas * 0.8, \n                                     Bs.gammas = jointFit$scales$Bs.gammas * 1.2), n.iter = 5000)\n\njointFit <- jointModelBayes(lmeFit, survFit, timeVar = \"year\", baseHaz = \"regr\", param = \"shared\",\n                            n.iter = 80000, n.thin = 5, verbose = T)\n\n# linear mixed model fit\nfitLME <- lme(CD4 ~ (obstime) * drug, \n              random = ~ obstime | patient, data = aids)\n# cox model fit\nfitCOX <- coxph(Surv(Time, death) ~ drug, data = aids.id, x = TRUE)\n\n# joint model fit\nfitJOINT <- jointModelBayes(fitLME, fitCOX, timeVar = \"obstime\", estimateWeightFun = TRUE, \n                            n.iter = 32000, verbose2 = TRUE,\n                            priors = list(priorshape1 = c(-5, 5), priorshape3 = c(-5, 5)))\n\nfitLME <- lme(log10(CRP) ~ obstime + age + gender, data = Bioshift1.dat, \n              random = ~ obstime | patnr)\nfitSURV <- coxph(Surv(FU_PE, PE) ~ age + gender, data = Bioshift_surv.dat, \n                 x = TRUE)\n\nfit.jm.cox <- jointModelBayes(fitLME, fitSURV, timeVar = \"obstime\", verbose2 = TRUE,\n                              estimateWeightFun = TRUE, n.iter = 40000)\nfit.jm.cox <- jointModelBayes(fitLME, fitSURV, timeVar = \"obstime\", n.iter = 50000)\nsummary(fit.jm.cox)\n\n\npriors = list(priorshape1 = c(-3, 3),\n              priorshape2 = c(1e-03, 5), \n              priorshape3 = c(-3, 3))\n\n\n\nlmeFit <- lme(sqrt(AoGradient) ~ 0 + TypeOp + TypeOp:ns(time, 2), data = AoValv, \n              random = ~ ns(time, 2) | id)\nsurvFit <- coxph(Surv(EvTime, event) ~ TypeOp + Age + sex + BMI, data = AoValv.id, x = TRUE)\njointFit1 <- jointModelBayes(lmeFit, survFit, timeVar = \"time\", estimateWeightFun = TRUE, \n                             n.iter = 30000)\n\n\n\n\nfitted(jointFit, \"E\")\nresid(jointFit, \"E\")\n\n\nsummary(jointFit)\nplot(jointFit)\n\n\nweightFun <- function (s, t, parms) {\n    dgbeta(s, parms[1], parms[2], d = t)\n}\ncurve(weightFun(x, 1, c(4, 4)), from = 0, to = 1)\n\nweightFun <- function (s, t, parms) {\n    dnorm(t - s, mean = parms[1], sd = parms[2]) / (pnorm(t, mean = parms[1], sd = parms[2]) - 0.5)\n}\ncurve(weightFun(x, 5, c(5, 0.2)), from = 0, to = 5)\n\n\n\nprothro$t0 <- 1 * (prothro$time == 0)\nlmeFit <- lme(pro ~ treat * (ns(time, 3) + t0), random = ~ ns(time, 3) | id, data = prothro)\nsurvFit <- coxph(Surv(Time, death) ~ treat, data = prothros, x = TRUE)\n\njointFit <- jointModelBayes(lmeFit, survFit, timeVar = \"time\", estimateWeightFun = TRUE)\n\nplot(jointFit)\n\nND <- pbc2[pbc2$id %in% c(2, 5), ]\nsfit <- survfitJM(jointFit, ND)\nplot(sfit, \"mean\", include.y = TRUE, fill.area = TRUE, conf.int = TRUE)\n\n\npredict(jointFit, newdata = ND, \"Subject\", interval = \"conf\")\n\nfor (i in 61:90) {\n    oo <- cor(t(jointFit$mcmc$b[i, , ])); dimnames(oo) <- NULL; oo\n    corrplot(oo, main = paste(\"S\", i))\n}\n\n\nlmeFit <- lme(CD4 ~ obstime, data = aids, random = ~ obstime | patient)\nsurvFit1 <- coxph(Surv(start, stop, event) ~ drug + gender + cluster(patient), \n                 data = aids, x = TRUE, model = TRUE)\njointFit1 <- jointModelBayes(lmeFit, survFit1, timeVar = \"obstime\")\nsurvFit2 <- coxph(Surv(Time, death) ~ drug + gender, \n                  data = aids.id, x = TRUE)\njointFit2 <- jointModelBayes(lmeFit, survFit2, timeVar = \"obstime\")\n\n\n##################################################################################\n\nobject <- jointFit.pbc1\nnewdata <- pbc2[pbc2$id == 2, ][1:4, ]\nTstart <- 6\nDt <- 4\nsimulateFun <- function (eta.y, scale) rlnorm(length(eta.y), eta.y, scale)\n\nsimFun <- function (eta.y, scale) rlnorm(length(eta.y), eta.y, scale)\n\nv1 <- dynInfo(jointFit.pbc1, newdata = pbc2[pbc2$id == 25, ][1:5, ], Dt = 4, simulateFun = simFun, seed = 1)\nv2 <- dynInfo(jointFit.pbc1, newdata = pbc2[pbc2$id == 25, ][1:5, ], Dt = 4, simulateFun = simFun, seed = 2)\nv3 <- dynInfo(jointFit.pbc1, newdata = pbc2[pbc2$id == 25, ][1:5, ], Dt = 4, simulateFun = simFun, seed = 3)\nv4 <- dynInfo(jointFit.pbc1, newdata = pbc2[pbc2$id == 25, ][1:5, ], Dt = 4, simulateFun = simFun, seed = 4)\n\n\nc1 <- cvDCL(jointFit.pbc1, pbc2, Tstart = 5, M = 900, seed = 1)\nc2 <- cvDCL(jointFit.pbc2, pbc2, Tstart = 5, M = 900, seed = 1)\nc3 <- cvDCL(jointFit.pbc3, pbc2, Tstart = 5, M = 900, seed = 1)\nc1;c2;c3\n\nv2 <- dynInfo(jointFit.pbc2, newdata = pbc2[pbc2$id == 2, ], Dt = 4, simulateFun = simFun)\n\nv2 <- dynInfo(jointFit.pbc1, newdata = pbc2[pbc2$id == 25, ][1:4, ], Dt = 4, \n              simulateFun = simFun, M = 1000)\n\n\n\nplot_info <- function (nn) {\n    sfit <- survfitJM(jointFit.pbc1, newdata = ND[1:nn, ])\n    plot(sfit, include.y = TRUE, estimator = \"mean\", fill.area = TRUE, conf.int = TRUE)\n    \n    lfit <- predict(jointFit.pbc1, newdata = ND[1:nn, ], type = \"Subject\", \n                    interval = \"confidence\", return = TRUE)\n    last.time <- with(lfit, year[!is.na(low)][1])\n    p1 <- xyplot(pred + low + upp ~ year, data = lfit, type = \"l\", lty = c(1,2,2), \n           col = c(2,1,1), abline = list(v = last.time, lty = 3), \n           xlab = \"Time (years)\", ylab = \"Predicted log(serum bilirubin)\")\n    \n    p2 <- xyplot(info ~ time | n, data = DD[DD$n == nn, ], type = c(\"p\", \"smooth\"), lwd = 2, \n           xlab = \"Time (years)\", ylab = \"Info\")\n    print(p1); print(p2)\n}\n\nplot_info(3)\n\n## \n\n# all subjects \nND <- pbc2[pbc2$years > 5, ]\nNDs <- split(ND, factor(ND$id))\nres <- vector(\"list\", length(NDs))\nfor (i in seq_along(NDs)) {\n    res[[i]] <- NextVisit(jointFit.pbc1, newdata = NDs[[i]], Tstart = 5, Dt = 4)\n}\ntime <- res[[1]][[1]]\ninfos <- sapply(res, function (x) x$info[, 1])\nmatplot(time, infos, type = \"l\", lty = 1)\nplot(time, - rowSums(infos) / length(NDs), type = \"l\", xlab = \"Time (years)\",\n     ylab = \"Expected Prognostic Cross-Entropy\", ylim = c(2.5, 15), lwd = 2)\nlines(time, - infos[,  1], type = \"l\", col = 2, lwd = 2)\nlines(time, - infos[, 14], type = \"l\", col = 3, lwd = 2)\nlines(time, - infos[, 52], type = \"l\", col = 4, lwd = 2)\n\n\n##################################################################################\n\n\nlibrary(\"shiny\")\nrunApp(file.path(.Library, \"JMbayes/demo\"))\n\nrunDynPred()\n\nrunApp(file.path(getwd(), \"vers2\", \"Rpgm\", \"shiny\"))\n\n\n\ngc()\n",
    "created" : 1442396155695.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2057854906",
    "id" : "6AFDF75B",
    "lastKnownWriteTime" : 1442413406,
    "path" : "C:/Users/Dimitris/Documents/PackagesGitHub/TestFiles/JMbayes/Test.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}